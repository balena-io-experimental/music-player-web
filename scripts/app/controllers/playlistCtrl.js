define(['angular', 'firebase'], function(angular, Firebase) {
  return function($scope, $location, $firebase, $speechRecognition, $speechSynthetis) {
    var LANG, completeSong, findSong, fireRef, ignoreUtterance, k, recognition, v, _ref, _results;
    fireRef = new Firebase('https://vocalist.firebaseio.com');
    $scope.$watch('songs', function() {
      var remaining, total;
      total = 0;
      remaining = 0;
      $scope.songs.$getIndex().forEach(function(id) {
        var song;
        song = $scope.songs[id];
        if (!song) {
          return;
        }
        total++;
        if (song.completed === false) {
          return remaining++;
        }
      });
      $scope.totalCount = total;
      $scope.remainingCount = remaining;
      $scope.completedCount = total - remaining;
      return $scope.allChecked = remaining === 0;
    }, true);
    $scope.addSong = function() {
      var newSong;
      newSong = $scope.newSong.trim();
      if (!newSong.length) {
        return;
      }
      $scope.songs.$add({
        title: newSong,
        completed: false
      });
      return $scope.newSong = '';
    };
    $scope.editSong = function(id) {
      var editedSong;
      if (id === $scope.playing.songId) {
        return;
      }
      editedSong = $scope.songs[id];
      if (editedSong.completed) {
        return;
      }
      $scope.editedSong = editedSong;
      return $scope.originalSong = angular.extend({}, editedSong);
    };
    $scope.doneEditing = function(id) {
      var title;
      $scope.editedSong = null;
      title = $scope.songs[id].title.trim();
      if (title) {
        return $scope.songs.$save(id);
      } else {
        return $scope.removeSong(id);
      }
    };
    $scope.revertEditing = function(id) {
      $scope.songs[id] = $scope.originalSong;
      return $scope.doneEditing(id);
    };
    $scope.removeSong = function(id) {
      return $scope.songs.$remove(id);
    };
    $scope.toggleCompleted = function(id) {
      var song;
      song = $scope.songs[id];
      song.completed = !song.completed;
      return $scope.songs.$save(id);
    };
    $scope.nextSong = function() {
      var id, song, _ref;
      $scope.stopMusic();
      id = (_ref = $scope.playing) != null ? _ref.songId : void 0;
      song = $scope.songs[id];
      if (song) {
        song.completed = true;
      }
      return setTimeout(function() {
        $scope.startMusic();
        return $scope.$apply();
      }, 1000);
    };
    $scope.startMusic = function() {
      return $scope.playing.$child('shouldPlay').$set(true);
    };
    $scope.stopMusic = function() {
      return $scope.playing.$set({
        shouldPlay: false
      });
    };
    $scope.clearCompletedSongs = function() {
      return angular.forEach($scope.songs.$getIndex(), function(id) {
        if ($scope.songs[id].completed) {
          return $scope.songs.$remove(id);
        }
      });
    };
    $scope.newSong = '';
    $scope.editedSong = null;
    if ($location.path() === '') {
      $location.path('/');
    }
    $scope.location = $location;
    $scope.songs = $firebase(fireRef.child('playlist'));
    $scope.playing = $firebase(fireRef.child('playing'));
    findSong = function(title) {
      $scope.songs.$getIndex().forEach(function(id) {
        var song;
        song = $scope.songs[id];
        if (song.title === title) {
          return id;
        }
      });
    };
    completeSong = function(title) {
      var id, song;
      id = findSong(title);
      if (!id) {
        return;
      }
      song = $scope.songs[id];
      song.completed = !song.completed;
      $scope.toggleCompleted(id);
      $scope.$apply();
      return true;
    };
    LANG = 'en-US';
    $speechRecognition.onstart(function(e) {
      return $speechSynthetis.speak('What songs do you want to play?', LANG);
    });
    $speechRecognition.onerror(function(e) {
      var error;
      error = e.error || '';
      return console.error('An error occurred ' + error);
    });
    $speechRecognition.payAttention();
    $speechRecognition.setLang(LANG);
    $speechRecognition.listen();
    $speechRecognition.onUtterance(function(utterance) {
      return console.log(utterance);
    });
    $scope.recognition = recognition = {};
    $scope.recognition[LANG] = {
      playSong: {
        regex: /^play .+/gi,
        lang: LANG,
        call: function(utterance) {
          var parts;
          parts = utterance.split(' ');
          if (parts.length > 1) {
            $scope.newSong = parts.slice(1).join(' ');
            $scope.addSong();
            return $scope.$apply();
          }
        }
      },
      startMusic: {
        regex: /start.*music/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.startMusic();
          return $scope.$apply();
        }
      },
      stopMusic: {
        regex: /stop.*music/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.stopMusic();
          return $scope.$apply();
        }
      },
      clearCompleted: {
        regex: /clear.*/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.clearCompletedSongs();
          return $scope.$apply();
        }
      },
      next: {
        regex: /next.*/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.nextSong();
          return $scope.$apply();
        }
      },
      listTasks: [
        {
          regex: /^remove .+/gi,
          lang: LANG,
          call: function(utterance) {
            var id, parts, title;
            parts = utterance.split(' ');
            if (parts.length > 1) {
              title = parts.slice(1).join(' ');
              id = findSong(title);
              if (id) {
                $scope.removeSong(id);
                return $scope.$apply();
              }
            }
          }
        }
      ]
    };
    ignoreUtterance = {};
    _ref = recognition[LANG];
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      if (v instanceof Array) {
        continue;
      }
      _results.push(ignoreUtterance[k] = $speechRecognition.listenUtterance(v));
    }
    return _results;
  };
});

//# sourceMappingURL=data:application/json;base64,
