define(['angular', 'json!config.json', 'firebase'], function(angular, config, Firebase) {
  return function($scope, $location, $firebase, $speechRecognition, $speechSynthetis) {
    var LANG, completeSong, findSong, fireRef, firebaseUrl, ignoreUtterance, k, prefix, recognition, v, _ref, _ref1, _results;
    prefix = (_ref = $location.url().split('/')) != null ? _ref[1] : void 0;
    if (prefix) {
      firebaseUrl = "http://" + prefix + ".firebaseio.com";
    } else {
      firebaseUrl = config.firebaseUrl;
    }
    console.log('Connecting to', firebaseUrl);
    fireRef = new Firebase(firebaseUrl);
    $scope.$watch('songs', function() {
      var remaining, total;
      total = 0;
      remaining = 0;
      $scope.songs.$getIndex().forEach(function(id) {
        var song;
        song = $scope.songs[id];
        if (!song) {
          return;
        }
        total++;
        if (song.completed === false) {
          return remaining++;
        }
      });
      $scope.totalCount = total;
      $scope.remainingCount = remaining;
      $scope.completedCount = total - remaining;
      return $scope.allChecked = remaining === 0;
    }, true);
    $scope.addSong = function() {
      var newSong;
      newSong = $scope.newSong.trim();
      if (!newSong.length) {
        return;
      }
      $scope.songs.$add({
        title: newSong,
        completed: false
      });
      return $scope.newSong = '';
    };
    $scope.editSong = function(id) {
      var editedSong;
      if (id === $scope.playing.songId) {
        return;
      }
      editedSong = $scope.songs[id];
      if (editedSong.completed) {
        return;
      }
      $scope.editedSong = editedSong;
      return $scope.originalSong = angular.extend({}, editedSong);
    };
    $scope.doneEditing = function(id) {
      var title;
      $scope.editedSong = null;
      title = $scope.songs[id].title.trim();
      if (title) {
        return $scope.songs.$save(id);
      } else {
        return $scope.removeSong(id);
      }
    };
    $scope.revertEditing = function(id) {
      $scope.songs[id] = $scope.originalSong;
      return $scope.doneEditing(id);
    };
    $scope.removeSong = function(id) {
      return $scope.songs.$remove(id);
    };
    $scope.toggleCompleted = function(id) {
      var song;
      song = $scope.songs[id];
      song.completed = !song.completed;
      return $scope.songs.$save(id);
    };
    $scope.nextSong = function() {
      var id, song, _ref1;
      $scope.stopMusic();
      id = (_ref1 = $scope.playing) != null ? _ref1.songId : void 0;
      song = $scope.songs[id];
      if (song) {
        song.completed = true;
      }
      return setTimeout(function() {
        $scope.startMusic();
        return $scope.$apply();
      }, 1000);
    };
    $scope.startMusic = function() {
      return $scope.playing.$child('shouldPlay').$set(true);
    };
    $scope.stopMusic = function() {
      return $scope.playing.$set({
        shouldPlay: false
      });
    };
    $scope.clearCompletedSongs = function() {
      return angular.forEach($scope.songs.$getIndex(), function(id) {
        if ($scope.songs[id].completed) {
          return $scope.songs.$remove(id);
        }
      });
    };
    $scope.newSong = '';
    $scope.editedSong = null;
    if ($location.path() === '') {
      $location.path('/');
    }
    $scope.location = $location;
    $scope.songs = $firebase(fireRef.child('playlist'));
    $scope.playing = $firebase(fireRef.child('playing'));
    findSong = function(title) {
      $scope.songs.$getIndex().forEach(function(id) {
        var song;
        song = $scope.songs[id];
        if (song.title === title) {
          return id;
        }
      });
    };
    completeSong = function(title) {
      var id, song;
      id = findSong(title);
      if (!id) {
        return;
      }
      song = $scope.songs[id];
      song.completed = !song.completed;
      $scope.toggleCompleted(id);
      $scope.$apply();
      return true;
    };
    LANG = 'en-US';
    $speechRecognition.onstart(function(e) {
      return $speechSynthetis.speak('What songs do you want to play?', LANG);
    });
    $speechRecognition.onerror(function(e) {
      var error;
      error = e.error || '';
      return console.error('An error occurred ' + error);
    });
    $speechRecognition.payAttention();
    $speechRecognition.setLang(LANG);
    $speechRecognition.listen();
    $speechRecognition.onUtterance(function(utterance) {
      return console.log(utterance);
    });
    $scope.recognition = recognition = {};
    $scope.recognition[LANG] = {
      playSong: {
        regex: /^play .+/gi,
        lang: LANG,
        call: function(utterance) {
          var parts;
          parts = utterance.split(' ');
          if (parts.length > 1) {
            $scope.newSong = parts.slice(1).join(' ');
            $scope.addSong();
            return $scope.$apply();
          }
        }
      },
      startMusic: {
        regex: /start.*music/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.startMusic();
          return $scope.$apply();
        }
      },
      stopMusic: {
        regex: /stop.*music/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.stopMusic();
          return $scope.$apply();
        }
      },
      clearCompleted: {
        regex: /clear.*/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.clearCompletedSongs();
          return $scope.$apply();
        }
      },
      next: {
        regex: /next.*/gi,
        lang: LANG,
        call: function(utterance) {
          $scope.nextSong();
          return $scope.$apply();
        }
      },
      listTasks: [
        {
          regex: /^remove .+/gi,
          lang: LANG,
          call: function(utterance) {
            var id, parts, title;
            parts = utterance.split(' ');
            if (parts.length > 1) {
              title = parts.slice(1).join(' ');
              id = findSong(title);
              if (id) {
                $scope.removeSong(id);
                return $scope.$apply();
              }
            }
          }
        }
      ]
    };
    ignoreUtterance = {};
    _ref1 = recognition[LANG];
    _results = [];
    for (k in _ref1) {
      v = _ref1[k];
      if (v instanceof Array) {
        continue;
      }
      _results.push(ignoreUtterance[k] = $speechRecognition.listenUtterance(v));
    }
    return _results;
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2hvYm9jaGlsZC9EZXNrdG9wL2Nsb25vc0Zyb250ZW5kL211c2ljLXBsYXllci13ZWItZnJvbnQtZW5kL3B1YmxpYy9zY3JpcHRzL2FwcC9jb250cm9sbGVycy9wbGF5bGlzdEN0cmwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvaG9ib2NoaWxkL0Rlc2t0b3AvY2xvbm9zRnJvbnRlbmQvbXVzaWMtcGxheWVyLXdlYi1mcm9udC1lbmQvc3JjL3NjcmlwdHMvYXBwL2NvbnRyb2xsZXJzL3BsYXlsaXN0Q3RybC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBQSxDQUFPLENBQUUsU0FBRixFQUFhLGtCQUFiLEVBQWlDLFVBQWpDLENBQVAsRUFBc0QsU0FBQyxPQUFELEVBQVUsTUFBVixFQUFrQixRQUFsQixHQUFBO1NBRXJELFNBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsU0FBcEIsRUFBK0Isa0JBQS9CLEVBQW1ELGdCQUFuRCxHQUFBO0FBRUMsUUFBQSxxSEFBQTtBQUFBLElBQUEsTUFBQSxxREFBcUMsQ0FBQSxDQUFBLFVBQXJDLENBQUE7QUFDQSxJQUFBLElBQUcsTUFBSDtBQUNDLE1BQUEsV0FBQSxHQUFlLFNBQUEsR0FBUSxNQUFSLEdBQWdCLGlCQUEvQixDQUREO0tBQUEsTUFBQTtBQUdDLE1BQUUsY0FBZ0IsT0FBaEIsV0FBRixDQUhEO0tBREE7QUFBQSxJQU1BLE9BQU8sQ0FBQyxHQUFSLENBQVksZUFBWixFQUE2QixXQUE3QixDQU5BLENBQUE7QUFBQSxJQU9BLE9BQUEsR0FBYyxJQUFBLFFBQUEsQ0FBUyxXQUFULENBUGQsQ0FBQTtBQUFBLElBU0EsTUFBTSxDQUFDLE1BQVAsQ0FBYyxPQUFkLEVBQXVCLFNBQUEsR0FBQTtBQUN0QixVQUFBLGdCQUFBO0FBQUEsTUFBQSxLQUFBLEdBQVEsQ0FBUixDQUFBO0FBQUEsTUFDQSxTQUFBLEdBQVksQ0FEWixDQUFBO0FBQUEsTUFFQSxNQUFNLENB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QUMsVUFBUCxDQUFrQixFQUFsQixDQUFBLENBQUE7dUJBQ0EsTUFBTSxDQUFDLE1BQVAsQ0FBQSxFQUZEO2VBSEQ7YUFISztVQUFBLENBRk47U0FEVTtPQWpDWDtLQXJJRCxDQUFBO0FBQUEsSUFvTEEsZUFBQSxHQUFrQixFQXBMbEIsQ0FBQTtBQXFMQTtBQUFBO1NBQUEsVUFBQTttQkFBQTtBQUNDLE1BQUEsSUFBWSxDQUFBLFlBQWEsS0FBekI7QUFBQSxpQkFBQTtPQUFBO0FBQUEsb0JBRUEsZUFBZ0IsQ0FBQSxDQUFBLENBQWhCLEdBQXFCLGtCQUFrQixDQUFDLGVBQW5CLENBQW1DLENBQW5DLEVBRnJCLENBREQ7QUFBQTtvQkF2TEQ7RUFBQSxFQUZxRDtBQUFBLENBQXRELENBQUEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSBbICdhbmd1bGFyJywgJ2pzb24hY29uZmlnLmpzb24nLCAnZmlyZWJhc2UnIF0sIChhbmd1bGFyLCBjb25maWcsIEZpcmViYXNlKSAtPlxuXG5cdCgkc2NvcGUsICRsb2NhdGlvbiwgJGZpcmViYXNlLCAkc3BlZWNoUmVjb2duaXRpb24sICRzcGVlY2hTeW50aGV0aXMpIC0+XG5cblx0XHRwcmVmaXggPSAkbG9jYXRpb24udXJsKCkuc3BsaXQoJy8nKT9bMV1cblx0XHRpZiBwcmVmaXhcblx0XHRcdGZpcmViYXNlVXJsID0gXCJodHRwOi8vI3twcmVmaXh9LmZpcmViYXNlaW8uY29tXCJcblx0XHRlbHNlXG5cdFx0XHR7IGZpcmViYXNlVXJsIH0gPSBjb25maWdcblxuXHRcdGNvbnNvbGUubG9nKCdDb25uZWN0aW5nIHRvJywgZmlyZWJhc2VVcmwpXG5cdFx0ZmlyZVJlZiA9IG5ldyBGaXJlYmFzZShmaXJlYmFzZVVybClcblxuXHRcdCRzY29wZS4kd2F0Y2ggJ3NvbmdzJywgLT5cblx0XHRcdHRvdGFsID0gMFxuXHRcdFx0cmVtYWluaW5nID0gMFxuXHRcdFx0JHNjb3BlLnNvbmdzLiRnZXRJbmRleCgpLmZvckVhY2ggKGlkKSAtPlxuXHRcdFx0XHRzb25nID0gJHNjb3BlLnNvbmdzW2lkXVxuXHRcdFx0XHRyZXR1cm4gaWYgbm90IHNvbmdcblxuXHRcdFx0XHR0b3RhbCsrXG5cdFx0XHRcdHJlbWFpbmluZysrIGlmIHNvbmcuY29tcGxldGVkID09IGZhbHNlXG5cblx0XHRcdCRzY29wZS50b3RhbENvdW50ID0gdG90YWxcblx0XHRcdCRzY29wZS5yZW1haW5pbmdDb3VudCA9IHJlbWFpbmluZ1xuXHRcdFx0JHNjb3BlLmNvbXBsZXRlZENvdW50ID0gdG90YWwgLSByZW1haW5pbmdcblx0XHRcdCRzY29wZS5hbGxDaGVja2VkID0gcmVtYWluaW5nID09IDBcblx0XHQsIHRydWVcblxuXHRcdCRzY29wZS5hZGRTb25nID0gLT5cblx0XHRcdG5ld1NvbmcgPSAkc2NvcGUubmV3U29uZy50cmltKClcblx0XHRcdHJldHVybiBpZiBub3QgbmV3U29uZy5sZW5ndGhcblxuXHRcdFx0JHNjb3BlLnNvbmdzLiRhZGRcblx0XHRcdFx0dGl0bGU6IG5ld1Nvbmdcblx0XHRcdFx0Y29tcGxldGVkOiBmYWxzZVxuXG5cdFx0XHQkc2NvcGUubmV3U29uZyA9ICcnXG5cblx0XHQkc2NvcGUuZWRpdFNvbmcgPSAoaWQpIC0+XG5cdFx0XHRyZXR1cm4gaWYgaWQgPT0gJHNjb3BlLnBsYXlpbmcuc29uZ0lkXG5cblx0XHRcdGVkaXRlZFNvbmcgPSAkc2NvcGUuc29uZ3NbaWRdXG5cdFx0XHRyZXR1cm4gaWYgZWRpdGVkU29uZy5jb21wbGV0ZWRcblxuXHRcdFx0JHNjb3BlLmVkaXRlZFNvbmcgPSBlZGl0ZWRTb25nXG5cdFx0XHQkc2NvcGUub3JpZ2luYWxTb25nID0gYW5ndWxhci5leHRlbmQoe30sIGVkaXRlZFNvbmcpXG5cblx0XHQkc2NvcGUuZG9uZUVkaXRpbmcgPSAoaWQpIC0+XG5cdFx0XHQkc2NvcGUuZWRpdGVkU29uZyA9IG51bGxcblx0XHRcdHRpdGxlID0gJHNjb3BlLnNvbmdzW2lkXS50aXRsZS50cmltKClcblx0XHRcdGlmIHRpdGxlXG5cdFx0XHRcdCRzY29wZS5zb25ncy4kc2F2ZShpZClcblx0XHRcdGVsc2Vcblx0XHRcdFx0JHNjb3BlLnJlbW92ZVNvbmcoaWQpXG5cblx0XHQkc2NvcGUucmV2ZXJ0RWRpdGluZyA9IChpZCkgLT5cblx0XHRcdCRzY29wZS5zb25nc1tpZF0gPSAkc2NvcGUub3JpZ2luYWxTb25nXG5cdFx0XHQkc2NvcGUuZG9uZUVkaXRpbmcoaWQpXG5cblx0XHQkc2NvcGUucmVtb3ZlU29uZyA9IChpZCkgLT5cblx0XHRcdCRzY29wZS5zb25ncy4kcmVtb3ZlKGlkKVxuXG5cdFx0JHNjb3BlLnRvZ2dsZUNvbXBsZXRlZCA9IChpZCkgLT5cblx0XHRcdHNvbmcgPSAkc2NvcGUuc29uZ3NbaWRdXG5cdFx0XHRzb25nLmNvbXBsZXRlZCA9IG5vdCBzb25nLmNvbXBsZXRlZFxuXHRcdFx0JHNjb3BlLnNvbmdzLiRzYXZlKGlkKVxuXG5cdFx0JHNjb3BlLm5leHRTb25nID0gLT5cblx0XHRcdCRzY29wZS5zdG9wTXVzaWMoKVxuXHRcdFx0aWQgPSAkc2NvcGUucGxheWluZz8uc29uZ0lkXG5cdFx0XHRzb25nID0gJHNjb3BlLnNvbmdzW2lkXVxuXHRcdFx0c29uZy5jb21wbGV0ZWQgPSB0cnVlIGlmIHNvbmdcblxuXHRcdFx0c2V0VGltZW91dCAtPlxuXHRcdFx0XHQkc2NvcGUuc3RhcnRNdXNpYygpXG5cdFx0XHRcdCRzY29wZS4kYXBwbHkoKVxuXHRcdFx0LCAxMDAwXG5cblx0XHQkc2NvcGUuc3RhcnRNdXNpYyA9IC0+XG5cdFx0XHQkc2NvcGUucGxheWluZy4kY2hpbGQoJ3Nob3VsZFBsYXknKS4kc2V0KHRydWUpXG5cblx0XHQkc2NvcGUuc3RvcE11c2ljID0gLT5cblx0XHRcdCRzY29wZS5wbGF5aW5nLiRzZXQoc2hvdWxkUGxheTogZmFsc2UpXG5cblx0XHQkc2NvcGUuY2xlYXJDb21wbGV0ZWRTb25ncyA9IC0+XG5cdFx0XHRhbmd1bGFyLmZvckVhY2ggJHNjb3BlLnNvbmdzLiRnZXRJbmRleCgpLCAoaWQpIC0+XG5cdFx0XHRcdGlmICRzY29wZS5zb25nc1tpZF0uY29tcGxldGVkXG5cdFx0XHRcdFx0JHNjb3BlLnNvbmdzLiRyZW1vdmUoaWQpXG5cblx0XHQkc2NvcGUubmV3U29uZyA9ICcnXG5cdFx0JHNjb3BlLmVkaXRlZFNvbmcgPSBudWxsXG5cblx0XHQkbG9jYXRpb24ucGF0aCgnLycpIGlmICRsb2NhdGlvbi5wYXRoKCkgPT0gJydcblx0XHQkc2NvcGUubG9jYXRpb24gPSAkbG9jYXRpb25cblxuXHRcdCMgQmluZCB0aGUgc29uZ3MgdG8gdGhlIGZpcmViYXNlIHByb3ZpZGVyLlxuXHRcdCRzY29wZS5zb25ncyA9ICRmaXJlYmFzZShmaXJlUmVmLmNoaWxkKCdwbGF5bGlzdCcpKVxuXHRcdCRzY29wZS5wbGF5aW5nID0gJGZpcmViYXNlKGZpcmVSZWYuY2hpbGQoJ3BsYXlpbmcnKSlcblxuXHRcdCMgU3BlZWNoIFJlY29nbml0aW9uIC0tLS0tPiBUT0RPOiBTZXBhcmF0ZSBpbnRvIHNlcnZpY2UvZGlyZWN0aXZlLlxuXG5cdFx0ZmluZFNvbmcgPSAodGl0bGUpIC0+XG5cdFx0XHQkc2NvcGUuc29uZ3MuJGdldEluZGV4KCkuZm9yRWFjaCAoaWQpIC0+XG5cdFx0XHRcdHNvbmcgPSAkc2NvcGUuc29uZ3NbaWRdXG5cdFx0XHRcdHJldHVybiBpZCBpZiBzb25nLnRpdGxlID09IHRpdGxlXG5cblx0XHRcdHJldHVyblxuXG5cdFx0Y29tcGxldGVTb25nID0gKHRpdGxlKSAtPlxuXHRcdFx0aWQgPSBmaW5kU29uZyh0aXRsZSlcblx0XHRcdHJldHVybiBpZiAhaWRcblxuXHRcdFx0c29uZyA9ICRzY29wZS5zb25nc1tpZF1cblx0XHRcdHNvbmcuY29tcGxldGVkID0gbm90IHNvbmcuY29tcGxldGVkXG5cdFx0XHQkc2NvcGUudG9nZ2xlQ29tcGxldGVkKGlkKVxuXHRcdFx0JHNjb3BlLiRhcHBseSgpXG5cblx0XHRcdHJldHVybiB0cnVlXG5cblx0XHRMQU5HID0gJ2VuLVVTJ1xuXHRcdCRzcGVlY2hSZWNvZ25pdGlvbi5vbnN0YXJ0IChlKSAtPlxuXHRcdFx0JHNwZWVjaFN5bnRoZXRpcy5zcGVhaygnV2hhdCBzb25ncyBkbyB5b3Ugd2FudCB0byBwbGF5PycsIExBTkcpXG5cblx0XHQkc3BlZWNoUmVjb2duaXRpb24ub25lcnJvciAoZSkgLT5cblx0XHRcdGVycm9yID0gZS5lcnJvciBvciAnJ1xuXHRcdFx0Y29uc29sZS5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgJyArIGVycm9yKVxuXG5cdFx0JHNwZWVjaFJlY29nbml0aW9uLnBheUF0dGVudGlvbigpXG5cdFx0JHNwZWVjaFJlY29nbml0aW9uLnNldExhbmcoTEFORylcblx0XHQkc3BlZWNoUmVjb2duaXRpb24ubGlzdGVuKClcblxuXHRcdCRzcGVlY2hSZWNvZ25pdGlvbi5vblV0dGVyYW5jZSAodXR0ZXJhbmNlKSAtPlxuXHRcdFx0Y29uc29sZS5sb2codXR0ZXJhbmNlKVxuXG5cdFx0JHNjb3BlLnJlY29nbml0aW9uID0gcmVjb2duaXRpb24gPSB7fVxuXHRcdCRzY29wZS5yZWNvZ25pdGlvbltMQU5HXSA9XG5cdFx0XHRwbGF5U29uZzpcblx0XHRcdFx0cmVnZXg6IC9ecGxheSAuKy9naVxuXHRcdFx0XHRsYW5nOiBMQU5HXG5cdFx0XHRcdGNhbGw6ICh1dHRlcmFuY2UpIC0+XG5cdFx0XHRcdFx0cGFydHMgPSB1dHRlcmFuY2Uuc3BsaXQoJyAnKVxuXHRcdFx0XHRcdGlmIHBhcnRzLmxlbmd0aCA+IDFcblx0XHRcdFx0XHRcdCRzY29wZS5uZXdTb25nID0gcGFydHMuc2xpY2UoMSkuam9pbignICcpXG5cdFx0XHRcdFx0XHQkc2NvcGUuYWRkU29uZygpXG5cdFx0XHRcdFx0XHQkc2NvcGUuJGFwcGx5KClcblx0XHRcdHN0YXJ0TXVzaWM6XG5cdFx0XHRcdHJlZ2V4OiAvc3RhcnQuKm11c2ljL2dpXG5cdFx0XHRcdGxhbmc6IExBTkdcblx0XHRcdFx0Y2FsbDogKHV0dGVyYW5jZSkgLT5cblx0XHRcdFx0XHQkc2NvcGUuc3RhcnRNdXNpYygpXG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpXG5cdFx0XHRzdG9wTXVzaWM6XG5cdFx0XHRcdHJlZ2V4OiAvc3RvcC4qbXVzaWMvZ2lcblx0XHRcdFx0bGFuZzogTEFOR1xuXHRcdFx0XHRjYWxsOiAodXR0ZXJhbmNlKSAtPlxuXHRcdFx0XHRcdCRzY29wZS5zdG9wTXVzaWMoKVxuXHRcdFx0XHRcdCRzY29wZS4kYXBwbHkoKVxuXHRcdFx0Y2xlYXJDb21wbGV0ZWQ6XG5cdFx0XHRcdHJlZ2V4OiAvY2xlYXIuKi9naVxuXHRcdFx0XHRsYW5nOiBMQU5HXG5cdFx0XHRcdGNhbGw6ICh1dHRlcmFuY2UpIC0+XG5cdFx0XHRcdFx0JHNjb3BlLmNsZWFyQ29tcGxldGVkU29uZ3MoKVxuXHRcdFx0XHRcdCRzY29wZS4kYXBwbHkoKVxuXHRcdFx0bmV4dDpcblx0XHRcdFx0cmVnZXg6IC9uZXh0LiovZ2lcblx0XHRcdFx0bGFuZzogTEFOR1xuXHRcdFx0XHRjYWxsOiAodXR0ZXJhbmNlKSAtPlxuXHRcdFx0XHRcdCRzY29wZS5uZXh0U29uZygpXG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpXG5cdFx0XHRsaXN0VGFza3M6IFtcblx0XHRcdFx0cmVnZXg6IC9ecmVtb3ZlIC4rL2dpXG5cdFx0XHRcdGxhbmc6IExBTkcsXG5cdFx0XHRcdGNhbGw6ICh1dHRlcmFuY2UpIC0+XG5cdFx0XHRcdFx0IyBUT0RPOiBvbmx5IGRvIGZvciBub3QgY29tcGxldGVcblx0XHRcdFx0XHRwYXJ0cyA9IHV0dGVyYW5jZS5zcGxpdCgnICcpXG5cdFx0XHRcdFx0aWYgcGFydHMubGVuZ3RoID4gMVxuXHRcdFx0XHRcdFx0dGl0bGUgPSBwYXJ0c1sxLi4uXS5qb2luKCcgJylcblx0XHRcdFx0XHRcdGlkID0gZmluZFNvbmcodGl0bGUpXG5cdFx0XHRcdFx0XHRpZiBpZFxuXHRcdFx0XHRcdFx0XHQkc2NvcGUucmVtb3ZlU29uZyhpZClcblx0XHRcdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpXG5cdFx0XHRdXG5cblx0XHRpZ25vcmVVdHRlcmFuY2UgPSB7fVxuXHRcdGZvciBrLCB2IG9mIHJlY29nbml0aW9uW0xBTkddXG5cdFx0XHRjb250aW51ZSBpZiB2IGluc3RhbmNlb2YgQXJyYXlcblxuXHRcdFx0aWdub3JlVXR0ZXJhbmNlW2tdID0gJHNwZWVjaFJlY29nbml0aW9uLmxpc3RlblV0dGVyYW5jZSh2KVxuIl19
